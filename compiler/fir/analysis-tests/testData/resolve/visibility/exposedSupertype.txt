FILE: exposedSupertype.kt
    public final class A : R|kotlin/Any| {
        constructor(): R|A| {
            super<R|kotlin/Any|>()
        }

        protected abstract interface AProtectedI : R|kotlin/Any| {
        }

        public abstract interface APublicI : R|kotlin/Any| {
        }

    }
    public final class B : R|kotlin/Any| {
        constructor(): R|B| {
            super<R|kotlin/Any|>()
        }

        protected final class BProtected : R|kotlin/Any| {
            constructor(): R|B.BProtected| {
                super<R|kotlin/Any|>()
            }

        }

        public final inner class BInner : R|kotlin/Any| {
            constructor(): R|B.BInner| {
                super<R|kotlin/Any|>()
            }

        }

    }
    private final class C : R|kotlin/Any| {
        constructor(): R|C| {
            super<R|kotlin/Any|>()
        }

        public final class CPublic : R|kotlin/Any| {
            constructor(): R|C.CPublic| {
                super<R|kotlin/Any|>()
            }

        }

        public abstract interface CPublicI : R|kotlin/Any| {
        }

    }
    public final class D : R|A| {
        constructor(): R|D| {
            super<R|A|>()
        }

        public final class Test1 : R|A.AProtectedI| {
            constructor(): R|D.Test1| {
                super<R|kotlin/Any|>()
            }

        }

    }
    public abstract interface E : R|kotlin/Any| {
    }
    public final class Test2 : R|A.APublicI|, R|B.BInner| {
        constructor(): R|Test2| {
            super<R|B.BInner|>()
        }

    }
    public final class Test3 : R|C.CPublicI|, R|C| {
        constructor(): R|Test3| {
            super<R|C|>()
        }

    }
    public final class Test4 : R|E|, R|A.AProtectedI| {
        constructor(): R|Test4| {
            super<R|kotlin/Any|>()
        }

    }
    public final class Test5 : R|C.CPublicI|, R|B.BInner| {
        constructor(): R|Test5| {
            super<R|B.BInner|>()
        }

    }
    public final class Test6 : R|E|, R|C.CPublic| {
        constructor(): R|Test6| {
            super<R|C.CPublic|>()
        }

    }
    public final class Test7 : R|ERROR CLASS: Symbol not found, for `D.PublicButProtected`| {
        constructor(): R|Test7| {
            super<R|kotlin/Any|>()
        }

    }
